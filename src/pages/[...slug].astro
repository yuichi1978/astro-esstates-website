---
import BlockRenderer from "../components/BlockRenderer.astro";
import type { Block } from "@wp-block-tools/styles";
import CommonHead from "../components/CommonHead.astro";

export async function getStaticPaths() {
  const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
    method: "POST",
    headers: {
      "content-type": "application/json",
    },
    body: JSON.stringify({
      query: `
      query AllPages {
				pages(first: 10000){
					nodes {
						uri
            blocks
					}
				}
        properties(first: 10000) {
          nodes {
            uri
            blocks
          }
        }
			}
      `,
    }),
  });
  const { data } = await response.json();
  return [...data.pages.nodes, ...data.properties.nodes]
    .filter((page: any) => {
      let found = false;
      const hasPropertySearch = (blocks: Block[]) => {
        for (let block of blocks) {
          if (block.name === "astroestates/property-search") {
            found = true;
            break;
          }
          if (block.innerBlocks) {
            hasPropertySearch(block.innerBlocks);
          }
        }
      };
      hasPropertySearch(page.blocks);
      return !found;
    })
    .map((page: any) => ({
      params: { slug: page.uri === "/" ? undefined : page.uri },
    }));
}

const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
  method: "POST",
  headers: {
    "content-type": "application/json",
  },
  body: JSON.stringify({
    query: `
    query PageQuery($uri: String!) {
			nodeByUri(uri: $uri) {
				... on ContentNode {
          databaseId
					blocks
					seo {
						title
						metaDesc
					}
				}
			}
		}
    `,
    variables: {
      uri: (Astro.params as any).slug || "/",
    },
  }),
});

const { data } = await response.json();
// const { blocks, seo } = Astro.props;
const blocks = (data.nodeByUri?.blocks || []) as Block[];
const seo = data.nodeByUri?.seo;
const postId = data.nodeByUri?.databaseId;
---

<html lang="en">
  <CommonHead title={seo.title || ""} description={seo.metaDesc || ""} />
  <body>
    <BlockRenderer blocks={blocks} postId={postId} />
  </body>
</html>
